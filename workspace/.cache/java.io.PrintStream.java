 // Source code is unavailable, and was generated by the Fernflower decompiler.
package java.io;

import java.io.PrintStream.1;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Formatter;
import java.util.Locale;
import java.util.Locale.Category;
import jdk.internal.access.SharedSecrets;
import jdk.internal.misc.InternalLock;

public class PrintStream extends FilterOutputStream implements Appendable, Closeable {
   private final InternalLock lock;
   private final boolean autoFlush;
   private boolean trouble;
   private Formatter formatter;
   private final Charset charset;
   private BufferedWriter textOut;
   private OutputStreamWriter charOut;
   private boolean closing;

   private static <T> T requireNonNull(T obj, String message) {
      if (obj == null) {
         throw new NullPointerException(message);
      } else {
         return obj;
      }
   }

   private static Charset toCharset(String csn) throws UnsupportedEncodingException {
      requireNonNull(csn, "charsetName");

      try {
         return Charset.forName(csn);
      } catch (UnsupportedCharsetException | IllegalCharsetNameException var2) {
         throw new UnsupportedEncodingException(csn);
      }
   }

   private PrintStream(boolean autoFlush, OutputStream out) {
      super(out);
      this.trouble = false;
      this.closing = false;
      this.autoFlush = autoFlush;
      Charset var10001;
      if (out instanceof PrintStream) {
         PrintStream ps = (PrintStream)out;
         var10001 = ps.charset();
      } else {
         var10001 = Charset.defaultCharset();
      }

      this.charset = var10001;
      this.charOut = new OutputStreamWriter(this, this.charset);
      this.textOut = new BufferedWriter(this.charOut);
      if (this.getClass() == PrintStream.class) {
         this.lock = InternalLock.newLockOrNull();
      } else {
         this.lock = null;
      }

   }

   private PrintStream(boolean autoFlush, Charset charset, OutputStream out) {
      this(out, autoFlush, charset);
   }

   public PrintStream(OutputStream out) {
      this(out, false);
   }

   public PrintStream(OutputStream out, boolean autoFlush) {
      this(autoFlush, (OutputStream)requireNonNull(out, "Null output stream"));
   }

   public PrintStream(OutputStream out, boolean autoFlush, String encoding) throws UnsupportedEncodingException {
      this((OutputStream)requireNonNull(out, "Null output stream"), autoFlush, toCharset(encoding));
   }

   public PrintStream(OutputStream out, boolean autoFlush, Charset charset) {
      super(out);
      this.trouble = false;
      this.closing = false;
      this.autoFlush = autoFlush;
      this.charOut = new OutputStreamWriter(this, charset);
      this.textOut = new BufferedWriter(this.charOut);
      this.charset = charset;
      if (this.getClass() == PrintStream.class) {
         this.lock = InternalLock.newLockOrNull();
      } else {
         this.lock = null;
      }

   }

   public PrintStream(String fileName) throws FileNotFoundException {
      this(false, new FileOutputStream(fileName));
   }

   public PrintStream(String fileName, String csn) throws FileNotFoundException, UnsupportedEncodingException {
      this(false, toCharset(csn), new FileOutputStream(fileName));
   }

   public PrintStream(String fileName, Charset charset) throws IOException {
      this(false, (Charset)requireNonNull(charset, "charset"), new FileOutputStream(fileName));
   }

   public PrintStream(File file) throws FileNotFoundException {
      this(false, new FileOutputStream(file));
   }

   public PrintStream(File file, String csn) throws FileNotFoundException, UnsupportedEncodingException {
      this(false, toCharset(csn), new FileOutputStream(file));
   }

   public PrintStream(File file, Charset charset) throws IOException {
      this(false, (Charset)requireNonNull(charset, "charset"), new FileOutputStream(file));
   }

   private void ensureOpen() throws IOException {
      if (this.out == null) {
         throw new IOException("Stream closed");
      }
   }

   public void flush() {
      if (this.lock != null) {
         this.lock.lock();

         try {
            this.implFlush();
         } finally {
            this.lock.unlock();
         }
      } else {
         synchronized(this) {
            this.implFlush();
         }
      }

   }

   private void implFlush() {
      try {
         this.ensureOpen();
         this.out.flush();
      } catch (IOException var2) {
         this.trouble = true;
      }

   }

   public void close() {
      if (this.lock != null) {
         this.lock.lock();

         try {
            this.implClose();
         } finally {
            this.lock.unlock();
         }
      } else {
         synchronized(this) {
            this.implClose();
         }
      }

   }

   private void implClose() {
      if (!this.closing) {
         this.closing = true;

         try {
            this.textOut.close();
            this.out.close();
         } catch (IOException var2) {
            this.trouble = true;
         }

         this.textOut = null;
         this.charOut = null;
         this.out = null;
      }

   }

   public boolean checkError() {
      if (this.out != null) {
         this.flush();
      }

      OutputStream var2 = this.out;
      if (var2 instanceof PrintStream) {
         PrintStream ps = (PrintStream)var2;
         return ps.checkError();
      } else {
         return this.trouble;
      }
   }

   protected void setError() {
      this.trouble = true;
   }

   protected void clearError() {
      this.trouble = false;
   }

   public void write(int b) {
      try {
         if (this.lock != null) {
            this.lock.lock();

            try {
               this.implWrite(b);
            } finally {
               this.lock.unlock();
            }
         } else {
            synchronized(this) {
               this.implWrite(b);
            }
         }
      } catch (InterruptedIOException var10) {
         Thread.currentThread().interrupt();
      } catch (IOException var11) {
         this.trouble = true;
      }

   }

   private void implWrite(int b) throws IOException {
      this.ensureOpen();
      this.out.write(b);
      if (b == 10 && this.autoFlush) {
         this.out.flush();
      }

   }

   public void write(byte[] buf, int off, int len) {
      try {
         if (this.lock != null) {
            this.lock.lock();

            try {
               this.implWrite(buf, off, len);
            } finally {
               this.lock.unlock();
            }
         } else {
            synchronized(this) {
               this.implWrite(buf, off, len);
            }
         }
      } catch (InterruptedIOException var12) {
         Thread.currentThread().interrupt();
      } catch (IOException var13) {
         this.trouble = true;
      }

   }

   private void implWrite(byte[] buf, int off, int len) throws IOException {
      this.ensureOpen();
      this.out.write(buf, off, len);
      if (this.autoFlush) {
         this.out.flush();
      }

   }

   public void write(byte[] buf) throws IOException {
      this.write(buf, 0, buf.length);
   }

   public void writeBytes(byte[] buf) {
      this.write(buf, 0, buf.length);
   }

   private void write(char[] buf) {
      try {
         if (this.lock != null) {
            this.lock.lock();

            try {
               this.implWrite(buf);
            } finally {
               this.lock.unlock();
            }
         } else {
            synchronized(this) {
               this.implWrite(buf);
            }
         }
      } catch (InterruptedIOException var10) {
         Thread.currentThread().interrupt();
      } catch (IOException var11) {
         this.trouble = true;
      }

   }

   private void implWrite(char[] buf) throws IOException {
      this.ensureOpen();
      this.textOut.write(buf);
      this.textOut.flushBuffer();
      this.charOut.flushBuffer();
      if (this.autoFlush) {
         for(int i = 0; i < buf.length; ++i) {
            if (buf[i] == '\n') {
               this.out.flush();
               break;
            }
         }
      }

   }

   private void writeln(char[] buf) {
      try {
         if (this.lock != null) {
            this.lock.lock();

            try {
               this.implWriteln(buf);
            } finally {
               this.lock.unlock();
            }
         } else {
            synchronized(this) {
               this.implWriteln(buf);
            }
         }
      } catch (InterruptedIOException var10) {
         Thread.currentThread().interrupt();
      } catch (IOException var11) {
         this.trouble = true;
      }

   }

   private void implWriteln(char[] buf) throws IOException {
      this.ensureOpen();
      this.textOut.write(buf);
      this.textOut.newLine();
      this.textOut.flushBuffer();
      this.charOut.flushBuffer();
      if (this.autoFlush) {
         this.out.flush();
      }

   }

   private void write(String s) {
      try {
         if (this.lock != null) {
            this.lock.lock();

            try {
               this.implWrite(s);
            } finally {
               this.lock.unlock();
            }
         } else {
            synchronized(this) {
               this.implWrite(s);
            }
         }
      } catch (InterruptedIOException var10) {
         Thread.currentThread().interrupt();
      } catch (IOException var11) {
         this.trouble = true;
      }

   }

   private void implWrite(String s) throws IOException {
      this.ensureOpen();
      this.textOut.write(s);
      this.textOut.flushBuffer();
      this.charOut.flushBuffer();
      if (this.autoFlush && s.indexOf(10) >= 0) {
         this.out.flush();
      }

   }

   private void writeln(String s) {
      try {
         if (this.lock != null) {
            this.lock.lock();

            try {
               this.implWriteln(s);
            } finally {
               this.lock.unlock();
            }
         } else {
            synchronized(this) {
               this.implWriteln(s);
            }
         }
      } catch (InterruptedIOException var10) {
         Thread.currentThread().interrupt();
      } catch (IOException var11) {
         this.trouble = true;
      }

   }

   private void implWriteln(String s) throws IOException {
      this.ensureOpen();
      this.textOut.write(s);
      this.textOut.newLine();
      this.textOut.flushBuffer();
      this.charOut.flushBuffer();
      if (this.autoFlush) {
         this.out.flush();
      }

   }

   private void newLine() {
      try {
         if (this.lock != null) {
            this.lock.lock();

            try {
               this.implNewLine();
            } finally {
               this.lock.unlock();
            }
         } else {
            synchronized(this) {
               this.implNewLine();
            }
         }
      } catch (InterruptedIOException var9) {
         Thread.currentThread().interrupt();
      } catch (IOException var10) {
         this.trouble = true;
      }

   }

   private void implNewLine() throws IOException {
      this.ensureOpen();
      this.textOut.newLine();
      this.textOut.flushBuffer();
      this.charOut.flushBuffer();
      if (this.autoFlush) {
         this.out.flush();
      }

   }

   public void print(boolean b) {
      this.write(String.valueOf(b));
   }

   public void print(char c) {
      this.write(String.valueOf(c));
   }

   public void print(int i) {
      this.write(String.valueOf(i));
   }

   public void print(long l) {
      this.write(String.valueOf(l));
   }

   public void print(float f) {
      this.write(String.valueOf(f));
   }

   public void print(double d) {
      this.write(String.valueOf(d));
   }

   public void print(char[] s) {
      this.write(s);
   }

   public void print(String s) {
      this.write(String.valueOf(s));
   }

   public void print(Object obj) {
      this.write(String.valueOf(obj));
   }

   public void println() {
      this.newLine();
   }

   public void println(boolean x) {
      if (this.getClass() == PrintStream.class) {
         this.writeln(String.valueOf(x));
      } else {
         synchronized(this) {
            this.print(x);
            this.newLine();
         }
      }

   }

   public void println(char x) {
      if (this.getClass() == PrintStream.class) {
         this.writeln(String.valueOf(x));
      } else {
         synchronized(this) {
            this.print(x);
            this.newLine();
         }
      }

   }

   public void println(int x) {
      if (this.getClass() == PrintStream.class) {
         this.writeln(String.valueOf(x));
      } else {
         synchronized(this) {
            this.print(x);
            this.newLine();
         }
      }

   }

   public void println(long x) {
      if (this.getClass() == PrintStream.class) {
         this.writeln(String.valueOf(x));
      } else {
         synchronized(this) {
            this.print(x);
            this.newLine();
         }
      }

   }

   public void println(float x) {
      if (this.getClass() == PrintStream.class) {
         this.writeln(String.valueOf(x));
      } else {
         synchronized(this) {
            this.print(x);
            this.newLine();
         }
      }

   }

   public void println(double x) {
      if (this.getClass() == PrintStream.class) {
         this.writeln(String.valueOf(x));
      } else {
         synchronized(this) {
            this.print(x);
            this.newLine();
         }
      }

   }

   public void println(char[] x) {
      if (this.getClass() == PrintStream.class) {
         this.writeln(x);
      } else {
         synchronized(this) {
            this.print(x);
            this.newLine();
         }
      }

   }

   public void println(String x) {
      if (this.getClass() == PrintStream.class) {
         this.writeln(String.valueOf(x));
      } else {
         synchronized(this) {
            this.print(x);
            this.newLine();
         }
      }

   }

   public void println(Object x) {
      String s = String.valueOf(x);
      if (this.getClass() == PrintStream.class) {
         this.writeln(String.valueOf(s));
      } else {
         synchronized(this) {
            this.print(s);
            this.newLine();
         }
      }

   }

   public PrintStream printf(String format, Object... args) {
      return this.format(format, args);
   }

   public PrintStream printf(Locale l, String format, Object... args) {
      return this.format(l, format, args);
   }

   public PrintStream format(String format, Object... args) {
      try {
         if (this.lock != null) {
            this.lock.lock();

            try {
               this.implFormat(format, args);
            } finally {
               this.lock.unlock();
            }
         } else {
            synchronized(this) {
               this.implFormat(format, args);
            }
         }
      } catch (InterruptedIOException var11) {
         Thread.currentThread().interrupt();
      } catch (IOException var12) {
         this.trouble = true;
      }

      return this;
   }

   private void implFormat(String format, Object... args) throws IOException {
      this.ensureOpen();
      if (this.formatter == null || this.formatter.locale() != Locale.getDefault(Category.FORMAT)) {
         this.formatter = new Formatter(this);
      }

      this.formatter.format(Locale.getDefault(Category.FORMAT), format, args);
   }

   public PrintStream format(Locale l, String format, Object... args) {
      try {
         if (this.lock != null) {
            this.lock.lock();

            try {
               this.implFormat(l, format, args);
            } finally {
               this.lock.unlock();
            }
         } else {
            synchronized(this) {
               this.implFormat(l, format, args);
            }
         }
      } catch (InterruptedIOException var12) {
         Thread.currentThread().interrupt();
      } catch (IOException var13) {
         this.trouble = true;
      }

      return this;
   }

   private void implFormat(Locale l, String format, Object... args) throws IOException {
      this.ensureOpen();
      if (this.formatter == null || this.formatter.locale() != l) {
         this.formatter = new Formatter(this, l);
      }

      this.formatter.format(l, format, args);
   }

   public PrintStream append(CharSequence csq) {
      this.print(String.valueOf(csq));
      return this;
   }

   public PrintStream append(CharSequence csq, int start, int end) {
      if (csq == null) {
         csq = "null";
      }

      return this.append(((CharSequence)csq).subSequence(start, end));
   }

   public PrintStream append(char c) {
      this.print(c);
      return this;
   }

   public Charset charset() {
      return this.charset;
   }

   static {
      SharedSecrets.setJavaIOCPrintStreamAccess(new 1());
   }
}
